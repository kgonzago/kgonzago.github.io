"use strict";(self.webpackChunkexb_client=self.webpackChunkexb_client||[]).push([[8806],{68577:(e,t,r)=>{r.d(t,{o2:()=>o,yZ:()=>a});var i=r(19431),s=r(17321);function a(e,t){const r=t||e.extent,i=e.width,a=(0,s.c9)(r?.spatialReference);return r&&i?r.width/i*a*s.hd*96:0}function o(e,t,r){return function(e,t){return 0===t||(0,i.W8)(e,t)||e<t}(e,t)&&function(e,t){return 0===t||(0,i.W8)(e,t)||e>t}(e,r)}},88806:(e,t,r)=>{r.r(t),r.d(t,{default:()=>A});var i=r(36663),s=r(66341),a=r(37956),o=r(70375),n=r(63592),l=r(15842),y=r(33926),p=r(81977),c=r(7283),h=(r(7753),r(39994),r(34248)),u=r(40266),m=r(39835),d=r(65943),b=r(91772),g=r(68577),f=r(35925),v=r(38481),S=r(91223),_=r(81432),x=r(87232),C=r(27668),I=r(63989),w=r(43330),L=r(18241),O=r(12478),E=r(95874),P=r(80002),T=r(2030),D=r(51599),N=r(74396),F=r(84684);function M(e,t){return"floorInfo"in t&&t.floorInfo?.floorField?function(e,t){if(!e?.length)return null;const r=e.filter((e=>""!==e)).map((e=>`'${e}'`));return r.push("''"),`${t} IN (${r.join(",")}) OR ${t} IS NULL`}(e,t.floorInfo.floorField):null}var R=r(93698);const Z={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let j=class extends N.Z{constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map((e=>{const t=M(this.floors,e);return e.toExportImageJSON(t)}));return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&(0,R.FN)(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.allSublayers.on("change",(()=>this.notifyChange("visibleSublayers"))),e.on("sublayer-update",(e=>this.notifyChange(Z[e.propertyName])))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map((e=>e.id)).join(","):"show:-1":null}get layerDefs(){const e=!!this.floors?.length,t=this.visibleSublayers.filter((t=>null!=t.definitionExpression||e&&null!=t.floorInfo));return t.length?JSON.stringify(t.reduce(((e,t)=>{const r=M(this.floors,t),i=(0,F._)(r,t.definitionExpression);return null!=i&&(e[t.id]=i),e}),{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers"),this.commitProperty("timeExtent");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const t=this.layer.sublayers,r=this.scale,i=t=>{t.visible&&(0===r||(0,g.o2)(r,t.minScale,t.maxScale))&&(t.sublayers?t.sublayers.forEach(i):e.unshift(t))};t&&t.forEach(i);const s=this._get("visibleSublayers");return!s||s.length!==e.length||s.some(((t,r)=>e[r]!==t))?e:s}toJSON(){const e=this.layer;let t={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?t.dynamicLayers=this.dynamicLayers:t={...t,layers:this.layers,layerDefs:this.layerDefs},t}};(0,i._)([(0,p.Cb)({readOnly:!0})],j.prototype,"dynamicLayers",null),(0,i._)([(0,p.Cb)()],j.prototype,"floors",void 0),(0,i._)([(0,p.Cb)({readOnly:!0})],j.prototype,"hasDynamicLayers",null),(0,i._)([(0,p.Cb)()],j.prototype,"layer",null),(0,i._)([(0,p.Cb)({readOnly:!0})],j.prototype,"layers",null),(0,i._)([(0,p.Cb)({readOnly:!0})],j.prototype,"layerDefs",null),(0,i._)([(0,p.Cb)({type:Number})],j.prototype,"scale",void 0),(0,i._)([(0,p.Cb)(D.qG)],j.prototype,"timeExtent",void 0),(0,i._)([(0,p.Cb)({readOnly:!0})],j.prototype,"version",null),(0,i._)([(0,p.Cb)({readOnly:!0})],j.prototype,"visibleSublayers",null),j=(0,i._)([(0,u.j)("esri.layers.mixins.ExportImageParameters")],j);var J=r(4452),V=r(23875),q=r(76912),U=r(72559);let k=class extends((0,C.h)((0,T.n)((0,E.M)((0,P.x)((0,_.O)((0,x.Y)((0,w.q)((0,L.I)((0,l.R)((0,O.Q)((0,S.V)((0,I.N)(v.Z))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(y.r9).then((()=>this._fetchService(t)))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,r,i){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap?.supportsDynamicLayers){const e=(0,d.M9)(i.origin);if(e===d.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;a=(0,R.QV)(s,e,d.s3.SERVICE)}else if(e>d.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");a=(0,R.QV)(s,e.sublayers,(0,d.M9)(e.origin))}}const o=[],n={writeSublayerStructure:a,...i};let l=a;s.forEach((e=>{const t=e.write({},n);o.push(t),l=l||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(t.layers=o),l&&(t.visibleLayers=s.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,i){const s=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new j({layer:this,floors:i?.floors,scale:(0,g.yZ)({extent:e,width:t})*s}),o=a.toJSON();a.destroy();const n=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},l=e?.spatialReference,y=(0,f.B9)(l);o.dpi*=s;const p={};if(i?.timeExtent){const{start:e,end:t}=i.timeExtent.toJSON();p.time=e&&t&&e===t?""+e:`${e??"null"},${t??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(p.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:t+","+r,...o,...n,...p}}async fetchImage(e,t,r,i){const{data:s}=await this._fetchImage("image",e,t,r,i);return s}async fetchImageBitmap(e,t,r,i){const{data:s,url:a}=await this._fetchImage("blob",e,t,r,i);return(0,J.g)(s,a,i?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:r}=await(0,s.Z)(this.url,t),{extent:i,fullExtent:o,timeExtent:n}=r,l=i||o;return{fullExtent:l&&b.Z.fromJSON(l),timeExtent:n&&a.Z.fromJSON({start:n[0],end:n[1]})}}loadAll(){return(0,n.G)(this,(e=>{e(this.allSublayers)}))}serviceSupportsSpatialReference(e){return(0,q.D)(this,e)}async _fetchImage(e,t,r,i,a){const n={responseType:e,signal:a?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,r,i,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(null!=n.query?.dynamicLayers&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new o.Z("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:e}=await(0,s.Z)(l,n);return{data:e,url:l}}catch(e){if((0,y.D_)(e))throw e;throw new o.Z("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:e})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await(0,s.Z)(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};(0,i._)([(0,p.Cb)((0,U.mi)("dateFieldsTimeReference"))],k.prototype,"dateFieldsTimeZone",void 0),(0,i._)([(0,p.Cb)({type:Boolean})],k.prototype,"datesInUnknownTimezone",void 0),(0,i._)([(0,p.Cb)()],k.prototype,"dpi",void 0),(0,i._)([(0,p.Cb)()],k.prototype,"gdbVersion",void 0),(0,i._)([(0,p.Cb)()],k.prototype,"imageFormat",void 0),(0,i._)([(0,h.r)("imageFormat",["supportedImageFormatTypes"])],k.prototype,"readImageFormat",null),(0,i._)([(0,p.Cb)({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],k.prototype,"imageMaxHeight",void 0),(0,i._)([(0,p.Cb)({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],k.prototype,"imageMaxWidth",void 0),(0,i._)([(0,p.Cb)()],k.prototype,"imageTransparency",void 0),(0,i._)([(0,p.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],k.prototype,"isReference",void 0),(0,i._)([(0,p.Cb)({json:{read:!1,write:!1}})],k.prototype,"labelsVisible",void 0),(0,i._)([(0,p.Cb)({type:["ArcGISMapServiceLayer"]})],k.prototype,"operationalLayerType",void 0),(0,i._)([(0,p.Cb)({json:{read:!1,write:!1}})],k.prototype,"popupEnabled",void 0),(0,i._)([(0,p.Cb)((0,U.mi)("preferredTimeReference"))],k.prototype,"preferredTimeZone",void 0),(0,i._)([(0,p.Cb)()],k.prototype,"sourceJSON",void 0),(0,i._)([(0,p.Cb)({json:{write:{ignoreOrigin:!0}}})],k.prototype,"sublayers",void 0),(0,i._)([(0,m.c)("sublayers",{layers:{type:[V.Z]},visibleLayers:{type:[c.z8]}})],k.prototype,"writeSublayers",null),(0,i._)([(0,p.Cb)({type:["show","hide","hide-children"]})],k.prototype,"listMode",void 0),(0,i._)([(0,p.Cb)({json:{read:!1},readOnly:!0,value:"map-image"})],k.prototype,"type",void 0),(0,i._)([(0,p.Cb)(D.HQ)],k.prototype,"url",void 0),k=(0,i._)([(0,u.j)("esri.layers.MapImageLayer")],k);const A=k}}]);