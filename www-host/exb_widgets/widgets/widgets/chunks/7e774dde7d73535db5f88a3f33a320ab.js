"use strict";(self.webpackChunkexb_client=self.webpackChunkexb_client||[]).push([[8986],{68986:(e,s,t)=>{t.r(s),t.d(s,{uploadAssets:()=>R});var r=t(66341),o=t(39994),n=t(13802),a=t(33926),i=t(12928),c=t(3466),u=t(12173),l=t(57450),p=t(70375);const d="upload-assets",f=()=>new Error;class m extends p.Z{constructor(){super(`${d}:unsupported`,"Layer does not support asset uploads.",f())}}class h extends p.Z{constructor(){super(`${d}:no-glb-support`,"Layer does not support glb.",f())}}class g extends p.Z{constructor(){super(`${d}:no-supported-source`,"No supported external source found",f())}}class w extends p.Z{constructor(){super(`${d}:not-base-64`,"Expected gltf data in base64 format after conversion.",f())}}class y extends p.Z{constructor(){super(`${d}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",f())}}class P extends p.Z{constructor(e,s){super(`${d}:bad-response`,`Bad response. Uploaded ${e} items and received ${s} results.`,f())}}class _ extends p.Z{constructor(e,s){super(`${d}-layer:upload-failed`,`Failed to upload mesh file ${e}. Error code: ${s?.code??"-1"}. Error message: ${s?.messages??"unknown"}`,f())}}class b extends p.Z{constructor(e){super(`${d}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,f())}}class T extends p.Z{constructor(){super(`${d}:convert3D-failed`,"convert3D failed.")}}const k={prepareAssetItems:.9,uploadAssetItems:.1},v={uploadEditSource:.5,serviceAssetsToGlb:.5},A={meshToAssetBlob:.5,uploadAssetBlobs:.5};var x=t(20692),Z=t(23148),$=t(86114);function E(e,s=(e=>{}),t){return new j(e,s,t)}class j{constructor(e,s=(e=>{}),t){if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let s=0;s<e;s++){const t=s,r=1/e;this._weights[t]=r,this._progressMap.set(t,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(1===e&&(0,o.Z)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[s,t]of this._timingsMap){const r=Math.round(t.end-t.start)/1e3,o=Math.round(r/e*100);console.log(this.taskName??"Task",{stepKey:s,stepTime:r,relativeTime:o})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),(0,o.Z)("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const r=(0,$.s1)(this._timingsMap,e,(()=>({start:t,end:0})));1===s&&(r.end=t)}this.emitProgress()}simulate(e,s){return F((s=>this.setProgress(e,s)),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}}function F(e=(e=>{}),s=D){const t=performance.now();e(0);const r=setInterval((()=>{const r=performance.now()-t,o=1-Math.exp(-r/s);e(o)}),S);return(0,Z.kB)((()=>{clearInterval(r),e(1)}))}function I(e,s=M){return(0,i.up)((0,i._H)(e*N/s))}const M=10,N=8e-6,S=(0,i.HA)(50),D=(0,i.HA)(1e3),U=1e6,O=20*U;async function B({data:e,name:s,description:t},o,n){let i=null;try{const u=(0,c.v_)(o,"uploads"),l=(0,c.v_)(u,"info"),{data:p}=await(0,r.Z)(l,{query:{f:"json"},responseType:"json"});(0,a.k_)(n);const d=(0,x.M8)(o),f=p.maxUploadFileSize*U,m=d?2e9:f,h=d?Math.min(O,f):O;if(e.size>m)throw new Error("Data too large");const g=(0,c.v_)(u,"register"),{data:w}=await(0,r.Z)(g,{query:{f:"json",itemName:C(s),description:t},responseType:"json",method:"post"});if((0,a.k_)(n),!w.success)throw new Error("Registration failed");const{itemID:y}=w.item;i=(0,c.v_)(u,y);const P=(0,c.v_)(i,"uploadPart"),_=Math.ceil(e.size/h),b=new Array;for(let s=0;s<_;++s)b.push(e.slice(s*h,Math.min((s+1)*h,e.size)));const T=b.slice().reverse(),k=new Array,v=E(_,n?.onProgress,"uploadItem"),A=async()=>{for(;0!==T.length;){const e=b.length-T.length,s=T.pop(),t=new FormData;v.simulate(e,I(s.size));try{const o=s;t.append("f","json"),t.append("file",o),t.append("partId",`${e}`);const{data:i}=await(0,r.Z)(P,{timeout:0,body:t,responseType:"json",method:"post"});if((0,a.k_)(n),!i.success)throw new Error("Part upload failed")}finally{o.remove()}}};for(let e=0;e<3&&0!==T.length;++e)k.push(A());await Promise.all(k);const Z=(0,c.v_)(i,"commit"),{data:$}=await(0,r.Z)(Z,{query:{f:"json",parts:b.map(((e,s)=>s)).join(",")},responseType:"json",method:"post"});if((0,a.k_)(n),!$.success)throw new Error("Commit failed");return $.item}catch(e){if(null!=i){const e=(0,c.v_)(i,"delete");await(0,r.Z)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw e}}function C(e){return e.replaceAll("/","_").replaceAll("\\","_")}var L=t(13449);async function R(e,s,t){const r=e.length;if(!r)return t?.onProgress?.(1),[];const o=E(r,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,r)=>async function(e,{layer:s,ongoingUploads:t},r){const o=t.get(e);if(o)return o;if(!function(e){return!!e.infoFor3D&&!!e.url}(s))throw new m;if(function(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>(0,l.JG)(e,t)))}(e,s))return r?.onProgress?.(1),e;const n=async function(e,s,t){const{metadata:r}=e,{displaySource:o}=r,n=q(o?.source,s),c=!!n,l=r.externalSources.length>0,p=c?async function(e,s,t){return{source:await z(e,s,t),original:!0}}(n,s,t):l?async function(e,s,t){const r=V(s),{externalSources:o}=e.metadata,n=function(e,s){for(const t of e){const e=q(t.source,s);if(e)return e}return null}(o,s);if(!n)throw new g;const a=E(v,t?.onProgress,"uploadConvertibleSource"),c=await z(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:c,original:!0}]);const u=n.reduce(((e,{asset:s})=>s instanceof File?e+s.size:e),0),l=a.simulate("serviceAssetsToGlb",function(e,s=10){return(0,i.up)((0,i._H)(e*N/s))}(u));try{return{source:await K(c,s,r)}}finally{l.remove()}}(e,s,t):async function(e,s,t){const r=E(A,t?.onProgress,"uploadLocalMesh"),o=async function(e,s,t){const r=V(s),o=await e.load(t),n=await o.toBinaryGLTF({ignoreLocalTransform:!0});(0,a.k_)(t);const i=await n.buffer();return(0,a.k_)(t),{blob:new Blob([i.data],{type:i.type}),assetName:`${(0,u.zS)()}.glb`,assetType:r}}(e,s,{...t,onProgress:r.makeOnProgress("meshToAssetBlob")});return{source:await G([o],s,{...t,onProgress:r.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}(e,s,t),d=await p;return(0,a.k_)(t),e.addExternalSources([d]),e}(e,s,r);t.set(e,n);try{await n}finally{t.delete(e)}return e}(e,s,{...t,onProgress:o.makeOnProgress(r)}))))}function q(e,s){if(!e)return null;const{infoFor3D:{supportedFormats:t,editFormats:r}}=s,o=(0,l.zE)(e),n=new Array;let a=!1;for(let e=0;e<o.length;++e){const s=H(o[e],t);if(!s)return null;r.includes(s.assetType)&&(a=!0),n.push(s)}return a?n:null}function H(e,s){const t=(0,l.vj)(e,s);return t?{asset:e,assetType:t}:null}async function z(e,s,t){return G(e.map((e=>async function(e,s){const{asset:t,assetType:r}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:r};const o=await t.toBlob(s);return(0,a.k_)(s),{blob:o,assetName:t.assetName,assetType:r}}(e,t))),s,t)}async function G(e,s,t){const r=E(k,t?.onProgress,"uploadAssetBlobs"),o=await function(e,s,t){const r=E(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,o)=>{const i=async function(e,s,t){const{blob:r,assetType:o,assetName:i}=e;let u=null;try{const e=await B({data:r,name:i},s.url,t);(0,a.k_)(t),u={assetType:o,assetUploadId:e.itemID}}catch(e){(0,a.r9)(e),n.Z.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!u){const e=await(0,c.IR)(r);if((0,a.k_)(t),!e.isBase64)throw new w;u={assetType:o,assetData:e.data}}if(!u)throw new y;return{item:u,assetName:i}}(await e,s,{...t,onProgress:r.makeOnProgress(o)});return(0,a.k_)(t),i})))}(e,s,{...t,onProgress:r.makeOnProgress("prepareAssetItems")});(0,a.k_)(t);const i=o.map((({item:e})=>e)),{uploadResults:u}=await J(i,s,{...t,onProgress:r.makeOnProgress("uploadAssetItems")});return(0,a.k_)(t),e.map(((e,t)=>function(e,s,t){const{success:r}=s;if(!r){const{error:t}=s;throw new _(e.assetName,t)}const{assetHash:o}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,c=(0,L.d1)(a,i);if(!c)throw new b(a);return new l.CP(n,c,[new l.LL(`${t.parsedUrl.path}/assets/${o}`,o)])}(o[t],u[t],s)))}async function J(e,s,t){F(t?.onProgress);try{const o=await(0,r.Z)((0,c.v_)(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,a.k_)(t),o.data.uploadResults.length!==e.length)throw new P(e.length,o.data.uploadResults.length);return o.data}finally{o.remove()}}async function K(e,s,t){const r=e.map((({assetName:e,parts:s})=>({assetName:e,assetHash:s[0].partHash}))),o=s.capabilities?.operations.supportsAsyncConvert3D,n={f:"json",assets:JSON.stringify(r),transportType:"esriTransportTypeUrl",targetFormat:t,async:o},a=(0,c.v_)(s.parsedUrl.path,"convert3D");let i;try{i=(await(o?Q:W)(a,{query:n,responseType:"json",timeout:0})).data}catch(e){throw new T}const{supportedFormats:u}=s.infoFor3D;return i.assets.map((e=>{const s=(0,L.S0)(e.contentType,u);if(!s)throw new b(s);return new l.CP(e.assetName,e.contentType,[new l.LL(e.assetURL,e.assetHash)])}))}function W(e,s){return(0,r.Z)(e,s)}async function Q(e,s){const t=(await(0,r.Z)(e,s)).data.statusUrl;for(;;){const e=(await(0,r.Z)(t,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,r.Z)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,a.e4)(X)}}function V(e){const{infoFor3D:s}=e,t=(0,L.S0)("model/gltf-binary",s.supportedFormats)??(0,L.Ow)("glb",s.supportedFormats);if(!t)throw new h;return t}const X=(0,i.HA)(1e3)}}]);